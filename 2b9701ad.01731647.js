(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{117:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return y}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=o.a.createContext({}),l=function(e){var t=o.a.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return o.a.createElement(a.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,a=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,y=u["".concat(c,".").concat(d)]||u[d]||f[d]||i;return n?o.a.createElement(y,s(s({ref:t},a),{},{components:n})):o.a.createElement(y,s({ref:t},a))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var a=2;a<i;a++)c[a]=n[a];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return l}));var r=n(3),o=n(7),i=(n(0),n(117)),c={id:"info-lock-script",title:"Info Cell Lock Script"},s={unversionedId:"tx-script-sudt/info-lock-script",id:"tx-script-sudt/info-lock-script",isDocsHomePage:!1,title:"Info Cell Lock Script",description:"Rules 1 - Verify if lock.args is consistent with info type and pool info",source:"@site/docs/tx-script-sudt/info-lock-script.md",slug:"/tx-script-sudt/info-lock-script",permalink:"/gliaswap-docs/docs/tx-script-sudt/info-lock-script",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tx-script-sudt/info-lock-script.md",version:"current",sidebar:"docs",previous:{title:"Info Cell Type Script",permalink:"/gliaswap-docs/docs/tx-script-sudt/info-type-script"},next:{title:"Swap Request Cell Lock Script",permalink:"/gliaswap-docs/docs/tx-script-sudt/swap-lock-script"}},p=[],a={toc:p};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},a,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h4",{id:"rules-1---verify-if-lockargs-is-consistent-with-info-type-and-pool-info"},"Rules 1 - Verify if lock.args is consistent with info type and pool info"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"let group_count = count(self.lock.group_inputs)\n\nif group_count == 2 // ckb/sudt\n    let info = group_inputs[0]\n    let pool = group_inputs[1]\n\n    if hash(ckb | pool.type_hash) != self.lock.args[0..32]\n        || info.type_hash != self.lock.args[32..64]\n        return fail\n\nelse if group_count == 3 // sudt/sudt\n    let info = group_inputs[0]\n    let pool_x = group_inputs[1]\n    let pool_y = group_inputs[2]\n\n    if hash(pool_x.type_hash | pool_y.type_hash) != self.lock.args[0..32]\n        || info.type_hash != self.lock.args[32..64]\n        return fail\nelse\n    return fail\n\nreturn success\n")))}l.isMDXComponent=!0}}]);