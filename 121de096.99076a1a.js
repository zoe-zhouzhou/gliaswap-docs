(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{107:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return y}));var i=n(0),l=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=l.a.createContext({}),s=function(e){var t=l.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return l.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},_=l.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),_=i,y=d["".concat(a,".").concat(_)]||d[_]||p[_]||o;return n?l.a.createElement(y,r(r({ref:t},u),{},{components:n})):l.a.createElement(y,r({ref:t},u))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=_;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:i,a[1]=r;for(var u=2;u<o;u++)a[u]=n[u];return l.a.createElement.apply(null,a)}return l.a.createElement.apply(null,n)}_.displayName="MDXCreateElement"},72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var i=n(3),l=n(7),o=(n(0),n(107)),a={id:"pool-tx",sidebar_label:"Pool",title:"Pool transaction structure"},r={unversionedId:"tx-script/pool-tx",id:"tx-script/pool-tx",isDocsHomePage:!1,title:"Pool transaction structure",description:"In pool page\uff0cwhen Liquidity Providers\uff08LPs) mananger their liquidity, 5 types of transaction may be involved:",source:"@site/docs/tx-script/pool-tx.md",slug:"/tx-script/pool-tx",permalink:"/gliaswap-docs/docs/tx-script/pool-tx",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tx-script/pool-tx.md",version:"current",sidebar_label:"Pool",sidebar:"docs",previous:{title:"Swap Transaction Structure",permalink:"/gliaswap-docs/docs/tx-script/swap-tx"},next:{title:"Info Cell Type Script",permalink:"/gliaswap-docs/docs/tx-script/info-type-script"}},c=[{value:"1. Creat a pool",id:"1-creat-a-pool",children:[{value:"Info type script",id:"info-type-script",children:[]}]},{value:"2. LPs submit add liquidity request",id:"2-lps-submit-add-liquidity-request",children:[]},{value:"3. LPs submit remove liquidity request",id:"3-lps-submit-remove-liquidity-request",children:[]},{value:"4. Aggregators match liquidity request with pool",id:"4-aggregators-match-liquidity-request-with-pool",children:[{value:"Info type script",id:"info-type-script-1",children:[]},{value:"Info lock script",id:"info-lock-script",children:[]},{value:"Liquidity request lock script",id:"liquidity-request-lock-script",children:[]},{value:"sUDT type script",id:"sudt-type-script",children:[]}]},{value:"5. LPs can cancel their own liquidity request",id:"5-lps-can-cancel-their-own-liquidity-request",children:[{value:"Liquidity request lock script",id:"liquidity-request-lock-script-1",children:[]}]}],u={toc:c};function s(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In pool page\uff0cwhen Liquidity Providers\uff08LPs) mananger their liquidity, 5 types of transaction may be involved:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Anyone can creat a pool"),Object(o.b)("li",{parentName:"ol"},"Liquidity Providers\uff08LPs) submit add liquidity request"),Object(o.b)("li",{parentName:"ol"},"Liquidity Providers\uff08LPs) submit remove liquidity request"),Object(o.b)("li",{parentName:"ol"},"Aggregators match liquidity request with pool to help LP to manager their liquidity sucessfully"),Object(o.b)("li",{parentName:"ol"},"Liquidity Providers\uff08LPs) cancel liquidity request")),Object(o.b)("h2",{id:"1-creat-a-pool"},"1. Creat a pool"),Object(o.b)("p",null,"Creat a pool in Gliaswap is permissionless. In the first version, Gliaswap only support to creat sudt/CKB pool. "),Object(o.b)("p",null,"Creat a pool actually is to creat two cell: "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"info cell used to store pool info, including reserve balance, Liquidity token balance and other ID info to indentify the pool"),Object(o.b)("li",{parentName:"ul"},"pool cell used to store the real asset, including CKB and sudt")),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"Input\n    Alice cell\n        capacity\n            250 + 186 + tx fee\n        data\n            NONE\n        type\n            NONE\n        lock\n            Alice lock\n        \nOutput\n    Info cell\n        capacity: \n            250\n        data: \n            ckb_reserve: 0\n            sudt_reserve: 0\n            lp_token_balance: 0\n            lp_token_type_hash\n        type: \n            code: INFO_TYPE_CODE_HASH \n            args: type id \n        lock: \n            code: INFO_LOCK_CODE_HASH \n            args: hash(ckb | asset_sudt_type_hash) | info_type_hash \n                \n     Pool cell\n        capacity: \n            186\n        data: \n            sudt_amount: 0\n        type: \n            <sudt type> \n        lock: \n            <info cell lock> \n")),Object(o.b)("p",null,"In this transaction,  Only info type script will be run to verify the tx, which leads to the third validation rule of info type script"),Object(o.b)("h3",{id:"info-type-script"},"Info type script"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Rule 4 - If this is a creating pool transaction, verify that the Pool cell is created at the same time as the Info cell, and that the data filled in info cell and pool cell are correct.")),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"if none_of(input.type.code_hash) == INFO_TYPE_CODE_HASH // Info creation\n    info_id_verification()\n\n    if count(output.lock.code_hash == INFO_LOCK_CODE_HASH) != 2 // pool not found\n        || info.lock.hash_type != 1\n        || info.lock.args[0..32] != hash(ckb | pool.type_hash\n        || info.lock.args[32..64] != info.type_hash\n        || info.lock_hash != pool.lock_hash\n        || pool.data.size < 16\n        return fail\n")),Object(o.b)("h2",{id:"2-lps-submit-add-liquidity-request"},"2. LPs submit add liquidity request"),Object(o.b)("p",null,"If a LP want to add liqidity to a pool, he/she needs to submit a add liquidity request firstly. For example\uff0cAlice want to add M CKB and N sUDT_A to pool:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"Input\n    Alice normal cell\n        capacity\n            <M + 142 + 142 + tx fee>\n        data\n            tokenA amount: N\n        type\n            <tokenA type>\n        lock\n            <user's lock>\n        \nOutput\n     Alice add liquidity request cell    \n        capacity: \n            <M + 142 + 142>\n        data: \n            sudt_amount: N\n        type: \n            <tokenA type>\n        lock:\n            code: LIQUIDITY_REQ_LOCK_CODE_HASH \n            args: user_lock_hash | version | sudtMin | ckbMin | info_type_hash_32 | 0 | 0 | // tip and tip fee are 0 in current version\n")),Object(o.b)("p",null,"Notice that this transaction only validates regular SUDT rules constrained in sudt type script."),Object(o.b)("h2",{id:"3-lps-submit-remove-liquidity-request"},"3. LPs submit remove liquidity request"),Object(o.b)("p",null,"If a LP want to remove liquidity from a pool, he/she needs to submit a remove liquidity request firstly. For example\uff0cBob want to burn L Liquidity token and withdraw the "),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"Input\n    Bob normal cell\n        capacity\n            <235 + tx fee>\n        data\n            Liquidity token amount: N\n        type\n            <Liquidity token type>\n        lock\n            <user's lock>\n        \nOutput\n     Bob remove liquidity request cell    \n        capacity: \n            235\n        data: \n            Liquidity token amount: L\n        type: \n            <Liquidity token type>\n        lock:\n            code: LIQUIDITY_REQ_LOCK_CODE_HASH \n            args: user_lock_hash | version | sudtMin | ckbMin | info_type_hash_32 | 0 | 0 | // tip and tip fee are 0 in current version\n")),Object(o.b)("p",null,"Notice that this transaction only validates regular SUDT rules constrained in sudt type script."),Object(o.b)("h2",{id:"4-aggregators-match-liquidity-request-with-pool"},"4. Aggregators match liquidity request with pool"),Object(o.b)("p",null,"Motivated by the Tip fee claimed in the liquidity request cell, aggregators will continually retrieve the liquidity request cells\uff08including add liquidity request and remove liquidity request\uff09 and the pool cells and then compete to match them off-chain and submit matching transactions."),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"Input\n    Info cell\n        capacity: \n            250\n        data: \n            ckb_reserve: X\n            sudt_reserve: Y\n            lp_token_balance: Z\n            lp_token_type_hash\n        type: \n            code: INFO_TYPE_CODE_HASH \n            args: type id \n        lock: \n            code: INFO_LOCK_CODE_HASH \n            args: hash(ckb | asset_sudt_type_hash) | info_type_hash \n                \n     Pool cell\n        capacity: \n            186 + X\n        data: \n            sudt_amount: Y\n        type: \n            <sudt type> \n        lock: \n            <info cell lock>  \n    \n     Deal-miner cell\n     \n     Bob remove liquidity request cell\n        capacity: \n            235\n        data: \n            Liquidity token amount: l\n        type: \n            <Liquidity token type>\n        lock:\n            code: LIQUIDITY_REQ_LOCK_CODE_HASH \n            args: user_lock_hash | version | sudtMin | ckbMin | info_type_hash_32 | 0 | 0 | // tip and tip fee are 0 in current version\n        \n     Alice add liquidity request cell    \n        capacity: \n            <M + 142 + 142>\n        data: \n            sudt_amount: N\n        type: \n            <tokenA type>\n        lock:\n            code: LIQUIDITY_REQ_LOCK_CODE_HASH \n            args: user_lock_hash | version | sudtMin | ckbMin | info_type_hash_32 | 0 | 0 | // tip and tip fee are 0 in current version\n            \nOutput\n    Info cell\n        capacity: \n            214\n        data: \n            ckb_reserve: X - l*X/L + M\n            sudt_reserve: Y - l*Y/L + N\n            LP_token_balance: L - l + M*L/X\n            LP_token_type_hash20\n        type: \n            code: Info_TYPE_CODE_HASH \n            args: type id \n        lock: \n            code: INFO_LOCK_CODE_HASH \n            args: hash(ckb | asset_sudt_type_hash) | info_type_hash20 \n                \n     Pool cell\n        capacity: \n            162 + X - l*X/L + M\n        data: \n            sudt_amount: Y - l*Y/L + N\n        type: \n            <sudt type> \n        lock: \n            <info cell lock> \n    \n     Deal-miner cell\n     \n     Bob normal cell\n        capacity: \n            184 + l*X/L\n        data: \n            sudt_amount: l*Y/L\n        type: \n            <sudt type>\n        lock:\n            <Bob normal lock>\n        \n     Alice Liquidity token cell    \n        capacity: \n            142\n        data: \n            sudt_amount: M*L/X\n        type: \n            <LP type>\n        lock:\n            <Alice normal lock>\n            \n     Alice change cell\n        capacity:\n            142\n        data:\n            sudt_amount: n \n        type\n            <sudtA_type>\n        lock\n            <Alice normal lock>\n")),Object(o.b)("p",null,"In this transaction, four types of script will be run to verify the tx:"),Object(o.b)("h3",{id:"info-type-script-1"},"Info type script"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Rule 5 - If this is a matching liquidity transaction, the cell sequence in this tx should follow the rules blow:")),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-text"}),"\ninfo_in_cell                            info_out_cell\npool_in_cell                            pool_out_cell\n                          -------\x3e\naggregator_in_cell                      aggregator_out_cell\n[remove_liquidity_request_cell]         [sudt_cell]\n[add_liquidity_request_cell]            [liquidity_cell + change_cell(sudt_cell or ckb_cell)]\n\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Rules 6 - If this is initially adding liquidity, verify if minting the correct amount Liquidity token for user, and verify if the data storaged in info cell and pool cell is correct.")),Object(o.b)("p",null,"Notice\uff1aIn pseudo code blow\uff0ctotal_liqidity is the Liquidity token balance in info cell, and liquidity_sudt_type_hash is Liquidity token type hash."),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"\nlet info_in = inputs[0]\nlet pool_in = inputs[1]\nlet matcher_in = inputs[2]\nlet info_out = outputs[0]\nlet pool_out = outputs[1]\nlet matcher_out = outputs[2]\n\nlet ckb_reserve = info_in.data.ckb_reserve\nlet sudt_reserve = info_in.data.sudt_reserve\nlet total_liquidity = info_in.data.total_liquidity\n\nlet pool_ckb_paid = 0\nlet pool_sudt_paid = 0\nlet ckb_collected = 0\nlet sudt_collected = 0\nlet user_liquidity_added = 0\nlet user_liquidity_removed = 0\n\nfn verify_genesis_add_liquidity()\n    if ckb_reserve != 0\n        || sudt_reserve != 0\n        || total_liquidity != 0\n        return fail\n\n    let liquidity = outputs[req_index_in_inputs]\n    let user_lock_hash = req.lock.args[0..32]\n    if liquidity.type_hash != info.data.liquidity_sudt_type_hash\n        || liquidity.lock_hash != user_lock_hash\n        reutrn fail\n\n    let sudt_injected = BigUint::from(req.data.amount)\n    let ckb_injected = BigUint::from(req.capacity - SUDT_CAPACITY)\n\n    let user_liquidity = BigUint::from(liquidity.data.amount)\n    let added_liquidity: u128 = (sudt_injected * ckb_injected).sqrt().try_into().unwrap();\n    if user_liquidity != added_liquidity\n        return fail\n\n    ckb_collected += ckb_injected\n    sudt_collected += req.data.amount\n    user_liquidity_added += user_liquidity\nendfn\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Rule 7 - If this is not initially adding liquidity, iterate through all request cell")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If it is add liquidity request cell, verify if minting the correct amount Liquidity token for user, and add up the CKB amount, sUDT amount and Liquidity token amount for verifying info cell and pool cell later."),Object(o.b)("li",{parentName:"ul"},"If it is remove liquidity request cell, verify if withdraw the correct CKB amount and sudt amount for user, and add up the CKB amount, sUDT amount and Liquidity token amount for verifying info cell and pool cell later."),Object(o.b)("li",{parentName:"ul"},"Verify if the data storaged in info cell and pool cell is correct ")),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"fn verify_add_liquidity()\n    if total_liquidity == 0\n        return fail\n\n    let liquidity = outputs[req_index_in_inputs * 2]\n    let change = outputs[req_index_in_inputs * 2 + 1]\n\n    let user_lock_hash = req.lock.args[0..32]\n    if liquidity.type_hash != info.data.liquidity_sudt_type_hash\n        || liquidity.lock_hash != user_lock_hash\n       Outdated doc. reutrn fail\n\n    let user_liquidity = BigUint::from(liquidity.data.amount)\n\n    // Check sudt exhaustion\n    if change.data.size == 0\n      if !change.type.is_none()\n          || change.lock_hash != user_lock_hash\n          return fail\n\n      let sudt_injected = BigUint::from(req.data.amount)\n      let ckb_injected = BigUint::from(req.capacity - SUDT_CAPACITY - change.capacity) // SUDT_CAPACITY for liquidity cell\n\n      if ckb_injected != (sudt_injected * ckb_reserve / sudt_reserve) + 1\n          return fail\n\n      // Check ckb_injected > min_ckb_injected\n      let min_ckb_injected = BigUint::from(req.lock.args[49..57])\n      if min_ckb_injected == 0\n          || ckb_injected < min_ckb_injected\n          return fail\n\n      if user_liquidity != sudt_injected * total_liquidity / sudt_reserve\n          return fail\n\n    // Check ckb exhaustion\n    else if change.data.size >= 16\n      if change.type_hash != pool.type_hash\n          || change.lock_hash != user_lock_hash\n          return fail\n\n      let sudt_injected = BigUint::from(req.data.amount - change.data.amount)\n      let ckb_injected = BigUint::from(req.capacity - SUDT_CAPACITY * 2) // Two SUDT_CAPACITY for liquidity cell and sudt change cell\n\n      if sudt_injected != (ckb_injected * sudt_reserve / ckb_reserve) + 1\n          return fail\n\n      // Check sudt_injected > min_sudt_injected\n      let min_sudt_injected = BigUint::from(req.lock.args[33..49])\n      if min_sudt_injected == 0\n          || sudt_injected < min_sudt_injected\n          return fail\n\n      if user_liquidity != ckb_injected * total_liquidity / ckb_reserve\n          return fail\n\n    else\n        return fail\n    fi\n\n    ckb_collected += ckb_injected\n    sudt_collected += sudt_injected\n    user_liquidity_added += user_liquidity\nendfn\n\nfn verify_remove_liquidity()\n    if total_liquidity == 0\n        return fail\n\n    if req.data.amount == 0\n        return fail\n\n    let output_a = outputs[req_index_in_inputs];\n    let output_b = outputs[req_index_in_inputs + 1];\n    if output_a.type.is_none() && output_b.type.is_some()\n        let ckb_out = output_a;\n        let sudt_out = output_b;\n    else if output_a.type.is_some() && output_b.type.is_none()\n        let ckb_out = output_b;\n        let sudt_out = output_a;\n    else\n        return fail\n    fi\n\n    if sudt_out.capacity != SUDT_CAPACITY\n        return fail\n\n    if ckb_out.data.size != 0\n        || sudt_out.data.size < 16\n        return fail\n\n    let user_lock_hash = req.lock.args[0..32]\n    if sudt_out.type_hash != pool.type_hash\n        || sudt_out.lock_hash != user_lock_hash\n        || ckb_out.lock_hash != user_lock_hash\n        return fail\n\n    let user_ckb_got = BigUint::from(ckb_out.capacity - req.capacity)\n    let user_sudt_got = BigUint::from(sudt_out.data.amount)\n    let removed_liquidity = BigUint::from(req.data.amount)\n\n    // Check user_ckb_got >= min_ckb_got\n    let min_ckb_got = req.lock.args[49..57]\n    if min_ckb_got == 0\n        || user_ckb_got < min_ckb_got\n        return fail\n\n    // Check user_sudt_got >= min_sudt_got\n    let min_sudt_got = req.lock.args[33..49]\n    if min_sudt_got == 0\n        || user_sudt_got < min_sudt_got\n        return fail\n\n    if user_ckb_got != removed_liquidity * ckb_reserve / total_liquidity\n        return fail\n\n    if user_sudt_got != removed_liquidity * sudt_reserve / total_liquidity\n        return fail\n\n    pool_ckb_paid += user_ckb_got\n    pool_sudt_paid += user_sudt_got\n    user_liquidity_removed += removed_liquidity\n\n    assert(pool_ckb_paid < ckb_reserve)\n    assert(pool_sudt_paid < sudt_reserve)\n    assert(user_liquidity_removed < total_liquidity)\nendfn\n\nfor req in inputs[3..]\n    let version = req.lock.args[32..33]\n    if INFO_req_VERSION != version\n        return fail\n\n    let req_info_type_hash = req.lock.args[57..89]\n    if req.data.size < 16\n        || req_info_type_hash != info.type_hash\n        return fail\n\n    if info.data.total_liquidity == 0\n        // Only allow on req to provide genesis liquidity\n        if count(inputs) - 3 != 1\n          return fail\n\n        verify_genesis_add_liquidity()\n        break\n\n    match req.type_hash\n        info.data.liquidity_sudt_type_hash => verify_remove_liquidity(req)\n        pool.type_hash => verify_add_liquidity(req)\n        _ => return fail // unknown liquidity req\nendfor\n\nif info_out.capacity != INFO_CAPACITY\n    || info_out.data.ckb_reserve != info_in.data.ckb_reserve - pool_ckb_paid + ckb_collected\n    || info_out.data.sudt_reserve != info_in.data.sudt_reserve - pool_sudt_paid + token_collected\n    || BigUint::from(info_out.data.total_liquidity) !=\n        BigUint::from(info_in.data.total_liquidity) - user_liquidity_removed +  user_liquidity_added\n    return fail\n\nif pool_out.capacity != pool_in.capacity + info_out.data.ckb_reserve - info_in.data.ckb_reserve\n    || pool_out.data.amount != info_out.data.sudt_reserve\n    return fail\n\nreturn success\n")),Object(o.b)("h3",{id:"info-lock-script"},"Info lock script"),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"./swap-tx##info-lock-script"}),"Rule 1")),Object(o.b)("h3",{id:"liquidity-request-lock-script"},"Liquidity request lock script"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Rule 1 - verifity input index","[1]"," is info cell")),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"// First input cell must be info cell\nlet info_type_hash = self.lock.args[57..89]\nif inputs[0].type_hash[0..32] == info_type_hash\n    return success\n\nreuturn fail\n")),Object(o.b)("h3",{id:"sudt-type-script"},"sUDT type script"),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://talk.nervos.org/t/rfc-simple-udt-draft-spec/4333"}),"sUDT proposal")),Object(o.b)("h2",{id:"5-lps-can-cancel-their-own-liquidity-request"},"5. LPs can cancel their own liquidity request"),Object(o.b)("p",null,"Normally your will add liquidity or remove liquidity successfully soon after you submit the liquidity request, but if the price fluctuates above the slippage, your request will be pending until the pool price fluctuates back to the price you submitted."),Object(o.b)("p",null,"So we provide the cancel option for LPs. LPs can send a transaction to cancel their own liquidity request."),Object(o.b)("p",null,"For example, if Bob want to cancel his remove liqidity request:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"Input\n     Bob remove liquidity request cell    \n        capacity: \n            235\n        data: \n            Liquidity token amount: L\n        type: \n            <Liquidity token type>\n        lock:\n            code: LIQUIDITY_REQ_LOCK_CODE_HASH \n            args: user_lock_hash | version | sudtMin | ckbMin | info_type_hash_32 | 0 | 0 | // tip and tip fee are 0 in current version\n\n    Bob normal cell (used to pay the tx fee)\n        \nOutput\n    Bob normal cell\n        capacity\n            <235>\n        data\n            Liquidity token amount: N\n        type\n            <Liquidity token type>\n        lock\n            <user's lock>\n\n")),Object(o.b)("p",null,"This transaction leads to another rule of LIQUIDITY_REQ_LOCK"),Object(o.b)("h3",{id:"liquidity-request-lock-script-1"},"Liquidity request lock script"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Rule 2 - If one of input cell in the transaction use user's lock specified in liquidity request cell args and the corresponding witness is not 0, unlock the request cell directly.")),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"let user_lock_hash = self.lock.args[0..32]\nif one_of(input.lock_hash) == user_lock_hash\n    // Check witness for anyone can pay lock compatibility\n    let witness = load_witness_args(this_lock_index, Source::Input).unwrap()\n    if witness.total_size() != 0\n        return success\n")))}s.isMDXComponent=!0}}]);