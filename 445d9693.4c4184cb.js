(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{117:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return y}));var l=n(0),r=n.n(l);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,c=e.parentName,o=a(e,["components","mdxType","originalType","parentName"]),u=p(n),d=l,y=u["".concat(c,".").concat(d)]||u[d]||b[d]||i;return n?r.a.createElement(y,s(s({ref:t},o),{},{components:n})):r.a.createElement(y,s({ref:t},o))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,c=new Array(i);c[0]=d;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:l,c[1]=s;for(var o=2;o<i;o++)c[o]=n[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return a})),n.d(t,"default",(function(){return p}));var l=n(3),r=n(7),i=(n(0),n(117)),c={id:"cell",title:"Cell Structure"},s={unversionedId:"tx-script-sudt/cell",id:"tx-script-sudt/cell",isDocsHomePage:!1,title:"Cell Structure",description:"The cell structure of swapping sUDT/sUDT is almost same with swapping sUDT/CKB with minor changes.",source:"@site/docs/tx-script-sudt/cell.md",slug:"/tx-script-sudt/cell",permalink:"/gliaswap-docs/docs/tx-script-sudt/cell",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tx-script-sudt/cell.md",version:"current",sidebar:"docs",previous:{title:"Liquidity Request Cell Lock Script",permalink:"/gliaswap-docs/docs/tx-script/liquidity-lock-script"},next:{title:"Swap Transaction Structure",permalink:"/gliaswap-docs/docs/tx-script-sudt/swap-tx"}},a=[{value:"Swap Request Cell",id:"swap-request-cell",children:[]},{value:"Liquidity Request Cell",id:"liquidity-request-cell",children:[]},{value:"Info Cell",id:"info-cell",children:[]},{value:"Pool Cell",id:"pool-cell",children:[]},{value:"Liquidty Token Cell",id:"liquidty-token-cell",children:[]}],o={toc:a};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(l.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The cell structure of swapping sUDT/sUDT is almost same with swapping sUDT/CKB with minor changes."),Object(i.b)("h2",{id:"swap-request-cell"},"Swap Request Cell"),Object(i.b)("p",null,"Swap request cell is used for selling or buying assets."),Object(i.b)("pre",null,Object(i.b)("code",Object(l.a)({parentName:"pre"},{}),"cell capacity - 227 bytes\n{\n  capacity: - 8 bytes\n  data: - 16 bytes for sell\n      sudt_amount: u128\n  type: sudt_type for sell - 65 bytes\n  lock: - 138 bytes\n      code: SWAP_REQ_LOCK_CODE_HASH - 32 bytes + 1 byte\n      args: sudt_type_hash (32 bytes, 0..32) | \n          version (u8, 1 byte, 32..33) | \n          amountOutMin (u128, 16 bytes, 33..49) | \n          user_lock_hash (32 bytes, 49..81) | \n          tips (8 bytes, 81..89) | \n          tips_sudt (16 bytes, 89..105)\n}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Field description :")," "),Object(i.b)("p",null,"Same with ",Object(i.b)("a",Object(l.a)({parentName:"p"},{href:"../tx-script/cell#swap-request-cell"}),"sUDT/CKB swap request cell")),Object(i.b)("h2",{id:"liquidity-request-cell"},"Liquidity Request Cell"),Object(i.b)("p",null,"Liquidity request cell is used for add liquidity to liquidity pool or remove liquidity from liquidity pool by liquidity provider."),Object(i.b)("pre",null,Object(i.b)("code",Object(l.a)({parentName:"pre"},{}),"{\ncapacity: - 8 bytes\ndata: - 16 bytes\n    sudt_amount: u128\ntype: sudt_x_type - 65 bytes\nlock: - 170 bytes\n    code: LIQUIDITY_LOCK_CODE_HASH - 32 bytes + 1 byte\n    args: info_type_hash (32 bytes, 0..32)\n        | user_lock_hash (32 bytes, 32..64)\n        | version (u8, 1 byte, 64..65)\n        | sudt_x_min (u128, 16 bytes, 65..81)\n        | sudt_y_min (u128, 16 bytes, 81..97)\n        | tips_ckb(8 bytes, 97..105)\n        | tips_sudt_x/tips_sudt_lp (16 bytes, 105..121)\n        | tips_sudt_y (16 bytes, 121..137) \n}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Field description :")," (total size: 235 bytes)"),Object(i.b)("p",null,"Same with ",Object(i.b)("a",Object(l.a)({parentName:"p"},{href:"../tx-script/cell#liquidity-request-cell"}),"sUDT/CKB liquidity request cell")),Object(i.b)("h2",{id:"info-cell"},"Info Cell"),Object(i.b)("p",null,"Info cell represents the current state of liquidity pool."),Object(i.b)("pre",null,Object(i.b)("code",Object(l.a)({parentName:"pre"},{}),"cell capacity: 250 bytes\n{\ncapacity: - 8 bytes\ndata: - 80 bytes\n    sudt_x_reserve: u128\n    sudt_y_reserve: u128\n    total_liquidity: u128\n    sudt_lp_type_hash: 32 bytes\ntype: - 65 bytes\n    code: INFO_TYPE_CODE_HASH - 32 bytes + 1 byte\n    args: id - 32 bytes\nlock: - 97 bytes\n    code: INFO_TYPE_CODE_HASH - 32 bytes + 1 byte\n    args: hash(sudt_x_type_hash | sudt_y_type_hash) - 32 bytes\n        | info_type_hash - 32 bytes\n}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Field description :"),"\uff08total size: 250 bytes) "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lock script"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"hash(ckb | asset_sudt_type_hash)"),"(size: 32 bytes): The order of sUDT in here follows dictionary order")))),Object(i.b)("h2",{id:"pool-cell"},"Pool Cell"),Object(i.b)("p",null,"Pool cell is used for fund custody."),Object(i.b)("pre",null,Object(i.b)("code",Object(l.a)({parentName:"pre"},{}),"cell size - 186 bytes\n{\ncapacity: - 8 bytes\ndata: - 16 bytes\n    sudt_amount\ntype: sudt_type - 65 bytes\nlock: info_lock - 97 bytes\n}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Field description :")," \uff08total size: 186 bytes) "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"capacity"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"data"),": The amount of sUDT in liquidity pool.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"type script"),": sUDT type.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"lock script"),": Same with info cell lock. "))),Object(i.b)("h2",{id:"liquidty-token-cell"},"Liquidty Token Cell"),Object(i.b)("pre",null,Object(i.b)("code",Object(l.a)({parentName:"pre"},{}),"cell size - 142 bytes\n{\ncapacity: - 8 bytes\ndata: amount: u128 - 16 bytes\ntype: - 65 bytes\n    code: sudt_type_script\n    args: info_cell_lock_hash\nlock: user_lock - 53 bytes\n}\n")))}p.isMDXComponent=!0}}]);